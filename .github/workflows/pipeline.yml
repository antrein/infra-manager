name: Backend CI/CD Pipeline

on:
  push:
    branches:
      - master
      - main
      - staging
  pull_request:
    branches:
      - master
      - main
      - staging
    types: [closed]

env:
  project_id: ${{ github.event.repository.name }}
  PORT: 8000
  BRANCH: ${{ github.ref == 'refs/heads/staging' && 'staging' || 'production' }}
  REGISTRY_REPO: antrein

  GCP_REGION: asia-southeast1
  GCP_ZONE: asia-southeast1-a

  AWS_REGION: asia-southeast-1

jobs:
  setup-environment:
    if: github.event.pull_request.merged == false && (github.event_name == 'push' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
      BRANCH: ${{ steps.set-env.outputs.BRANCH }}
    steps:
      - name: Set environment variables
        id: set-env
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          RANDOM_SUFFIX=$(openssl rand -hex 3)
          echo "::set-output name=IMAGE_TAG::${SHORT_SHA}_${RANDOM_SUFFIX}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

  dockerize-and-push-gcp:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'gcp' && (github.event_name == 'push' || github.event_name == 'pull_request')
    environment: ${{ needs.setup-environment.outputs.BRANCH }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ vars.GCP_SA_KEY }}

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo '${{ vars.ENV }}' > ./.env
      
      - name: Set additional environment variables
        run: |
          echo "BE_MODE=${{ vars.CONFIG_BE_MODE }}" >> ./.env
          echo "INFRA_MODE=${{ vars.CONFIG_INFRA_MODE }}" >> ./.env
          echo "CLOUD_PLATFORM=${{ vars.CLOUD_PLATFORM }}" >> ./.env

          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> ./.env
          echo "GCP_CLUSTER_NAME=${{ vars.GCP_CLUSTER_NAME }}" >> ./.env
          echo "GCP_ZONE=${{ vars.GCP_ZONE }}" >> ./.env

      - name: Set service account
        run: |
          echo '${{ vars.GCP_SA_KEY }}' >> service-account/gcp.json

      - name: Connect to cluster
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ vars.GCP_CLUSTER_NAME }}
          location: ${{ env.GCP_ZONE }}
      
      - name: Get GKE credentials
        run: |
          kubectl config view --flatten --minify > ./k8s/authorization/kubeconfig.yml
          cat ./k8s/authorization/kubeconfig.yml
      
      - name: Login Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker Image
        run: |
          IMAGE_NAME="${{ github.event.repository.name }}-${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          docker build -t reyshazni/$IMAGE_NAME .
          docker push reyshazni/$IMAGE_NAME
        env:
          IMAGE_TAG: ${{ needs.setup-environment.outputs.IMAGE_TAG }}
  
  dockerize-and-push-aws:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'aws'
    environment: ${{ needs.setup-environment.outputs.BRANCH }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo '${{ vars.ENV }}' > ./.env

      - name: Set additional environment variables
        run: |
          echo "BE_MODE=${{ vars.CONFIG_BE_MODE }}" >> ./.env
          echo "INFRA_MODE=${{ vars.CONFIG_INFRA_MODE }}" >> ./.env
          echo "CLOUD_PLATFORM=${{ vars.CLOUD_PLATFORM }}" >> ./.env

          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> ./.env
          echo "GCP_CLUSTER_NAME=${{ vars.GCP_CLUSTER_NAME }}" >> ./.env
          echo "GCP_ZONE=${{ vars.GCP_ZONE }}" >> ./.env
      
      - name: Create kubeconfig
        run: |
          echo '${{ vars.AWS_KUBECONFIG }}' > ./k8s/authorization/kubeconfig.yml

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        run: |
          DOCKER_PATH="$ECR_REGISTRY/${{ env.REGISTRY_REPO }}"
          IMAGE_NAME="${{ github.event.repository.name }}-${{ needs.setup-environment.outputs.IMAGE_TAG }}"

          docker build -t $DOCKER_PATH/$IMAGE_NAME  .
          docker push $DOCKER_PATH/$IMAGE_NAME


  dockerize-and-push-azure:
    needs: setup-environment
    if: vars.CLOUD_PLATFORM == 'azure'
    environment: ${{ needs.setup-environment.outputs.BRANCH }}
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.set-env.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pass env
        id: set-env
        run: |
          echo "::set-output name=IMAGE_TAG::${{ needs.setup-environment.outputs.IMAGE_TAG }}"
          echo "::set-output name=BRANCH::${{ env.BRANCH }}"

      - name: Create secret
        run: |
          echo '${{ vars.ENV }}' > ./.env

      - name: Set additional environment variables
        run: |
          echo "BE_MODE=${{ vars.CONFIG_BE_MODE }}" >> ./.env
          echo "INFRA_MODE=${{ vars.CONFIG_INFRA_MODE }}" >> ./.env
          echo "CLOUD_PLATFORM=${{ vars.CLOUD_PLATFORM }}" >> ./.env

          echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID }}" >> ./.env
          echo "GCP_CLUSTER_NAME=${{ vars.GCP_CLUSTER_NAME }}" >> ./.env
          echo "GCP_ZONE=${{ vars.GCP_ZONE }}" >> ./.env

      - name: Test secret
        run: |
          cat ./.env

      - name: Create kubeconfig
        run: |
          echo '${{ vars.AZURE_KUBECONFIG }}' > ./k8s/authorization/kubeconfig.yml

  deploy-to-server-gcp:
    needs: dockerize-and-push-gcp
    if: vars.CLOUD_PLATFORM == 'gcp' && (github.event_name == 'push' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-gcp.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-gcp.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.project_id }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ vars.GCP_SA_KEY }}

      - name: Connect to cluster
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ vars.GCP_CLUSTER_NAME }}
          location: ${{ env.GCP_ZONE }}

      - name: Deploy
        run: |
          kubectl apply -f k8s/${{ env.BRANCH }}.yml

  deploy-to-server-aws:
    needs: dockerize-and-push-aws
    if: vars.CLOUD_PLATFORM == 'aws'
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-aws.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-aws.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.project_id }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name  ${{ env.AWS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/${{ env.BRANCH }}.yml

  deploy-to-server-azure:
    needs: dockerize-and-push-azure
    if: vars.CLOUD_PLATFORM == 'azure'
    runs-on: ubuntu-latest
    environment: ${{ needs.dockerize-and-push-azure.outputs.BRANCH }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Prepare deployment file
        run: |
          IMAGE_TAG=${{ needs.dockerize-and-push-azure.outputs.IMAGE_TAG }}
          SHORT_SHA=$(echo "$IMAGE_TAG" | cut -d':' -f2)
          sed -i "s|<PROJECT_NAME>|${{ env.project_id }}|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<IMAGE_NAME>|reyshazni/${{ github.event.repository.name }}-$IMAGE_TAG|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<VERSION>|$SHORT_SHA|g" k8s/${{ env.BRANCH }}.yml
          sed -i "s|<PORT>|${{ env.PORT }}|g" k8s/${{ env.BRANCH }}.yml
          cat k8s/${{ env.BRANCH }}.yml